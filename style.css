.father {
  display: flex;
  height: 100vh;
  /* gap: 10px; */
  flex-direction: row;
  justify-content: center;
  /* align-items: center; */
  /* flex-wrap: nowwrap; */
  /* align-content: center; */

  /* flex-row: row wrap; */
}

.box {
  height: 400px;
  /* width: 200px; */
  background-color: tomato;
  border-radius: 5px;
  border: 1px solid black;
  color: white;
  font-size: 36px;

  display: flex;
  justify-content: center;
  align-items: center;
}

/* flexbox - 
자식요소에게는 거의 명령하지 않음

부모요소에 입력 하면 자식요소에게 적용 됨 + 자식 요소가 직속 부모 요소인지 체크
display:flex -> flex container로 바꿔줌


gap -> 기본적으로 flex container가 간격을 주도록 함
자식 요소 간 간격

flex-direction: row; 기본 값은 row  -> 기본 설정이므로 적어주지 않아도 됨
-> flexbox에게 요소들이 어떤 방향으로 갈지 지시하는 역할 (row & column) or row&column + reverse



flex axis (축)
-> flex 레이아웃 시스템에는 두 개의 축이 있음.
 - main axis (주축)
 - corss axis (교차축)

 flex container의 direction에 따라 달라짐.
 direction이 row 일 경우
  main axis는 왼쪽에서 오른쪽으로 가는 가로선
  cross axis는 row일 경우 위에서 아래로 가는 세로선
   
-> 아이템을 주축에서 옮기거나, 교차축에서 옮기는 경우가 있음
주축과 교차축을 옮기는 property는 서로 다름

-> 주축을 이동시키는 property는 justify-content

-> 교차축을 이동시키는 property는 align-items

flex container의 높이가 100px이어서 align-items가 변형되는 걸 볼 수 없어서 height:100vh 적용


-> .box도 flex container로 변경가능
  따라서 숫자도 가운데로 이동가능
  display: flex;
  justify-content: center;
  align-items: center;

  

  --

  flex-direction:row
  -> 주축은 수평, 교차축은 수직
  flex-direction:column
  -> 주축은 수직, 교차축은 수평
  

  --

  flex-wrap:nowrap; 이 기본값 (줄바꿈없음, 한 줄)
  flex-wrap:wrap; -> 자식요소 넓이만큼 (다중라인)
  
  --
  flex-row: row wrap; -> flex-direction & flex-wrap 설정

  --
  align-content:center; 
  align-content는 다중라인 컨테이너를 다룰 때만 사용하는 속성

  --
  gap대신 행 과 열 간격을 따로 주고 싶다면
  row-gap: 5px;
  column-gap: 30px;
*/

/* .box:nth-child(3) {
  background-color: blueviolet;
  order: 2;
}

.box:nth-child(6) {
  background-color: aqua;
  order: 1;
} */

.box:first-child {
  background-color: tomato;
  flex-basis: 500px;
  flex-grow: 0;
  flex-shrink: 3;
}

.box:last-child {
  background-color: teal;
  flex-grow: 1;
}

/* order를 포함해서 다른 속성들은 다른 자식들에게 상대적
  따라서 order 2, 1 하면 요소는 맨 마지막으로 이동 후 6, 3 순으로 보여진다.
  
  다른 요소들은 기본적으로 order는 0


  --
  align-self -> 교차축에서 개별적으로 정렬할 수 있게 선택
  align-self: flex-start;
  align-self: flex-end;

*/

/* flex-grow
  컨테이너 자식들에게 얼마만큼의 공간을 차지할 수 있는지 알려줌
  비율로 설정이 됨. 1 1 or 2 2 or 1 2
  e.g. -> 내비게이션 바가 로고보다 5배 크게하고 싶다. 1 5
  
  flex-grow의 기본값은 0
*/

/* flex-shrink
flex-grow와 반대 개념
아이템을 줄어들게 정한다 -> 비율, 순서에 따라서 줄어들게 함
플렉스 컨테이너가 작아질 수록 어떤 것이 얼마만큼 더 축소되는지 지정함.

flex-shrink의 기본값은 1

3, 0, 1 으로 설정 ->
화면 사이즈를 줄일 때 3이 다른 상자 보다 빠르게 축소
0은 축소 안 됨,
1은 3보다 천천히 축소 됨 

*/

/* flex-basis
flex항목의 이상적인 크기를 초기 설정

  flex-basis: 500px;
  flex-grow: 1;
  이라면 초기설정인 500픽셀부터 flex-grow 적용 됨

  다른 요소에도  flex-grow: 1;을 줘도 1:1이 아님

  flex-grow:1; flex-shrink:0;을 설정하면
  flex-basis는 min-width와 비슷한 속성이 됨.
  즉, 500px에서 고정, 커지지만, 축소되지 않음.

  flex-grow:0; flex-shrink:3; 이 되면 축소되지만 커지지는 않음.

  flex만 적어서 설정할 수도 있음.
  flex-grow, flex-shrink, flex-basis 순
  flex: 1, 0, 500px;

  flex-basis와 width의 차이점은 주축 기준으로 설정 됨.
  e.g. row일때 너비, column일때 높이
*/
